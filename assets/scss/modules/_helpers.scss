// Color contrast
@function color-yiq($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $yiq-text-dark;
  } @else {
    @return $yiq-text-light;
  }
}

@mixin gradient-bg($color) {
  @if $enable-gradients {
    background: $color linear-gradient(180deg, mix($body-bg, $color, 15%), $color) repeat-x;
  } @else {
    background-color: $color;
  }
}

/**
 * Grid, Center Last
 *
 */
@mixin grid-center-last( $columns ) {
  $total_columns: $columns * 2;
  $span: $total_columns / $columns;
  $offset: $columns - 1;
  $nth-child: if( $columns % 2 == 0, 'odd', 'even' );

  display: grid;
  grid-template-columns: repeat( $total_columns, 1fr );

  & > * {
    grid-column: span $span;

    &:nth-last-child(#{$offset}):nth-child(#{$nth-child}) {
      grid-column: $span / span $span;
    }
  }
}

/**
 * Margin, No Edge
 * Removes left margin from first item, right margin from last item
 */
@mixin margin-no-edge( $margin ) {
  margin: $margin;

  &:first-child {
    margin-left: 0;
  }

  &:last-child {
    margin-right: 0;
  }

}

/**
 * Icon Position
 *
 */
@mixin icon-position( $icon_size, $container_size: null ) {
  width: $icon_size;
  height: $icon_size;

    @if ( $container_size ) {
        margin-top: calc( ( #{$container_size} - #{$icon_size} ) / 2 );
    }
}

/**
 * Block Cover
 * Creates a block that covers the full width/height of parent div. Typically used on a :before pseudo element
 */
@mixin block-cover() {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
}

/**
 * Placeholder Color
 *
 */
@mixin placeholder-color( $color ) {

  ::-moz-placeholder {
    color: $color;
    opacity: 1;
  }

  ::-ms-input-placeholder {
    color: $color;
  }

  ::-webkit-input-placeholder {
    color: $color;
  }

  input:focus::-webkit-input-placeholder,
  input:focus::-moz-placeholder,
  input:focus:-ms-input-placeholder,
  textarea:focus::-webkit-input-placeholder,
  textarea:focus::-moz-placeholder,
  textarea:focus:-ms-input-placeholder {
    color:transparent;
  }

}

/**
 * Clearfix
 *
 */
@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

/**
 * Font Sizes
 *
**/
@mixin font-sizes( $base: null, $tablet: null, $medium: null, $large: null ) {

    @if ( $base ) {
        font-size: $base;
    }

    @if( $tablet ) {
        @include media(">=tablet") {
            font-size: $tablet;
        }
    }

    @if( $medium ) {
        @include media(">=medium") {
            font-size: $medium;
        }
    }

    @if( $large ) {
        @include media(">=desktop") {
            font-size: $large;
        }
    }

}

/**
 * Columns
 *
 */
@mixin columns( $columns, $grid_item_element: article, $gap: null ) {

  @if( $gap == null ) {
    $gap: $grid-gap;
  }

  & > #{$grid_item_element} {
    float: left;
    margin-left: $gap / $grid-width * 100%;
    width: ( ( $grid-width - $gap * ( $columns - 1 ) ) / $columns ) / $grid-width * 100%;

    &:nth-of-type(#{$columns}n+1) {
      clear: both;
      margin-left: 0;
    }
  }

  @supports( display: grid ) {
    display: grid;
    grid-column-gap: $gap;
    grid-template-columns: repeat( $columns, 1fr );

    & > #{$grid_item_element} {
      margin-left: 0;
      width: 100%;
    }

    header, nav, aside, footer {
      grid-column: 1 / -1;
    }
  }
}

/**
 * Columns, Mobile
 *
 */
@mixin columns-mobile( $columns, $grid_item_element: article, $gap: null ) {

  @include media("<tablet") {
    @include columns( $columns,$grid_item_element, $gap );
  }
}

/**
 * Columns, Tablet
 *
 */
@mixin columns-tablet( $columns, $grid_item_element: article, $gap: null ) {

  @include media(">=tablet", "<medium") {
    @include columns( $columns, $grid_item_element, $gap );
  }

}

/**
 * Columns, Tablet Up
 *
 */
@mixin columns-tablet-up( $columns, $grid_item_element: article, $gap: null ) {

  @include media(">=tablet") {
    @include columns( $columns, $grid_item_element, $gap );
  }

}

/**
 * Columns, Desktop
 *
 */
@mixin columns-desktop( $columns, $grid_item_element: article, $gap: null ) {
  @include media(">=medium") {
    @include columns( $columns, $grid_item_element, $gap );
  }
}

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($background, $border, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
  color: color-yiq($background);
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  @include hover {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
    } @else {
      box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($background);
    background-color: $background;
    border-color: $border;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
      }
    }
  }
}

@mixin button-outline-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
  color: $color;
  background-color: transparent;
  background-image: none;
  border-color: $color;

  &:hover {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow != none {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
      }
    }
  }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
  // Manually declare to provide an override to the browser default
  @if $enable-rounded {
    border-radius: $border-radius;
  } @else {
    border-radius: 0;
  }
}

@mixin transition($transition...) {
  @if $enable-transitions {
    @if length($transition) == 0 {
      transition: $transition-base;
    } @else {
      transition: $transition;
    }
  }

  @media screen and (prefers-reduced-motion: reduce) {
    transition: none;
  }
}

@mixin box-shadow($shadow...) {
  @if $enable-shadows {
    box-shadow: $shadow;
  }
}

@mixin hover {
  &:hover { @content; }
}

@mixin hover-focus {
  &:hover,
  &:focus {
    @content;
  }
}

// Single side border-radius

@mixin border-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-radius: $radius;
  }
}

@mixin border-top-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  }
}

@mixin border-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  }
}

@mixin border-bottom-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

@mixin border-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

